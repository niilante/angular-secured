!function(){angular.module("ngSecured.directives",[])}(),angular.module("ngSecured",["ui.router","LocalStorageModule","ngSecured.services"]),angular.module("ngSecured.services",["ui.router"]).run(["ngSecured.securityEnforcer",function(a){a.init()}]),function(){angular.module("ngSecured.services").constant("ngSecured.cacheKeys",{TOKEN:"token",LAST_STATE:"lastState",PERMISSIONS_CACHE:"permissionsCache",PERMISSIONS:"permissions"})}(),angular.module("ngSecured.services").constant("ngSecured.cacheOptions",{timeout:{FOREVER:"forever"},location:{LOCAL_STORAGE:"localStorage",SESSION_STORAGE:"sessionStorage"},cacheKeys:{MAIN_CACHE:"ngSecuredCache",LOGIN_CACHE:"loginCache",IS_LOGGED_IN:"isLoggedIn",ROLES:"roles"}}),function(){var a="private__ngSecured";angular.module("ngSecured.services").constant("ngSecured.defaultStateNames",{BASE_STATE:a,LOGIN:a+".LOGIN",POST_LOGOUT:a+".POST_LOGOUT",POST_LOGIN:a+".POST_LOGIN",NOT_AUTHENTICATED:a+".notAuthenticated",NOT_AUTHORIZED:a+".notAuthorized"})}(),function(){angular.module("ngSecured.services").constant("ngSecured.errorMessages",{WRONG_JSON_PATH:"Json Path was not defined or is not correct, value was: ",NO_PERMISSIONS_URL:"permissionUrl is not defined"})}(),angular.module("ngSecured.directives").directive("asRole",["ngSecured","$animate",function(a,b){return{transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(c,d,e,f,g){function h(a){var b=a[0],c=a[a.length-1];if(b===c)return angular.element(b);var d=b,e=[d];do{if(d=d.nextSibling,!d)break;e.push(d)}while(d!==c);return angular.element(e)}function i(){a.includesRole(l)?k||(k=c.$new(),g(k,function(a){a[a.length++]=document.createComment(" end asRole: "+e.asRole+" "),j={clone:a},b.enter(a,d.parent(),d)})):(j&&(b.leave(h(j.clone)),j=null),k&&(k.$destroy(),k=null))}var j,k,l;c.$watch(function(){return e.asRole},function(a){l=a,i()}),c.$watch(function(){return a.getRoles()},i)}}}]),function(){function a(){function a(){throw new Error(c)}function b(){function a(){throw new Error(c)}var b={};b.login=a,b.isLoggedIn=a,b.logout=a}var c="You must configure an authAdapter dependency";this.setup=a,this.$get=b}angular.module("ngSecured.services").provider("ngSecured.authAdapter",a),a.$inject=[]}(),function(){function a(a,b,c,d,e,f){function g(a,b,c){function d(b,d){function e(a){return c.goToPostLoginPage(d),a}return a.login(b).then(e)}function e(){a.logout(),b.clear(),c.goToPostLogoutPage()}function f(){return a.isLoggedIn()}var g={};return g.login=d,g.logout=e,g.isLoggedIn=f,g}var h={adapterOptions:{},permissions:{url:""},pages:{login:"ngSecured.login",loginPopup:null,unAuthorized:null,postLogin:null,postLogout:null}};this.secure=function(b){if(angular.extend(h,b),!b.cachePrefix)throw new Error("You must configure a cachePrefix");a.setPrefix("ngSecured_"+b.cachePrefix+"_"),d.setup(h.permissions),e.setupPages(h.pages)},this.$get=g,g.$inject=["ngSecured.authAdapter","ngSecured.permissionsDao","ngSecured.securityEnforcer"]}angular.module("ngSecured").provider("ngSecured",a),a.$inject=["localStorageServiceProvider","$httpProvider","ngSecured.authAdapterProvider","ngSecured.permissionsDaoProvider","ngSecured.securityEnforcerProvider","$windowProvider"]}(),function(){function a(){function a(a){angular.extend(c,a)}function b(a,b,d,e,f,g,h){function i(i){function k(a){var i=a.data,j=c.permissionsJsonPath;if(j&&(i=b(j)(i),!i)){var k="Permission url"+g.WRONG_JSON_PATH+'"'+j+'"';return d.error(k),h.reject(new Error(k))}return e.set(f.PERMISSIONS,i),l=i,i}return!i&&(l=j())?h.when(l):c.url?a.get(c.url).then(k):h.reject(g.NO_PERMISSIONS_URL)}function j(){return l?l:l=e.get(f.PERMISSIONS)}function k(){l=null,e.remove(f.PERMISSIONS)}var l,m={};return m.find=i,m.clear=k,m}var c={url:"",permissionsJsonPath:""};this.setup=a,this.$get=b,b.$inject=["$http","$parse","$log","localStorageService","ngSecured.cacheKeys","ngSecured.errorMessages","$q"]}angular.module("ngSecured.services").provider("ngSecured.permissionsDao",a),a.$inject=[]}(),function(){function a(a,b){function c(a){angular.extend(e,a)}function d(a,c,d,f,g,h,i,j,k,l){function m(){o(),n()}function n(){function a(a){f.error('In ngSecuredProvider.secure, you need to set the page name of "'+a+'"')}e.login===b.LOGIN&&a("Login"),e.unAuthorized===b.NOT_AUTHORIZED&&a("unAuthorized"),e.postLogin===b.POST_LOGIN&&a("postLogin"),e.postLogout===b.POST_LOGOUT&&a("postLogout")}function o(){a.$on("$stateChangeStart",z._handleStateChange)}function p(a,b,c,d,g){function i(a){function d(a){var d,f,g=a.requestApprovalState;if(a.answer===!0)y=!0,h.go(b.name,c);else if(g){if(angular.isString(g)?d=g:angular.isObject(g)&&(d=g.name,f=g.params),!d)throw new Error('requestApprovalState must have a "name" property');h.go(d,f)}else k.isLoggedIn()?h.go(e.unAuthorized):(z.setLastDeniedStateAndParams(b,c),z._goToLogin())}function g(a){f.error(a)}z._isPageApproved(a,c).then(d)["catch"](g)}var j,l;y?y=!1:(b.data&&(j=b.data.secured),j&&(j!==!0||k.isLoggedIn()||(a.preventDefault(),z.setLastDeniedStateAndParams(b,c),z._goToLogin()),angular.isString(j)&&(l=j,a.preventDefault(),i(l))))}function q(a,b){x={state:a,params:b},i.set(j.LAST_STATE,x)}function r(){return x||(x=i.get(j.LAST_STATE)),x}function s(){x=null,i.remove(j.LAST_STATE)}function t(){h.go(e.login)}function u(a,b){function d(){}var e,f,h={};if(e=c.defer(),!a)return void e.reject("You must define pass a valid securityController name");d.prototype.allow=function(){h.answer=!0,e.resolve(h)},d.prototype.deny=function(a){h.answer=!1,h.requestApprovalState=a,e.resolve(h)},f={guard:new d,permissionsDao:l,toParams:b};var i={securityContext:f};return g(a,i),e.promise}function v(a){var b,c;a=a?a:{},a.doNotGoToPostLogin||(a&&a.customPostLoginPage?h.go(a.customPostLoginPage):x?(b=x.state.name,c=x.params,s(),h.go(b,c)):h.go(e.postLogin))}function w(){var a=d("current.data.secured")(h);(a||h.current.name===e.login)&&h.go(e.postLogout)}var x,y,z={};return z.init=m,z.goToPostLoginPage=v,z.goToPostLogoutPage=w,z.setLastDeniedStateAndParams=q,z.getLastDeniedStateAndParams=r,z._handleStateChange=p,z._goToLogin=t,z._isPageApproved=u,z}var e={login:b.LOGIN,postLogin:b.POST_LOGIN,postLogout:b.POST_LOGOUT,unAuthorized:b.NOT_AUTHORIZED};!function(){a.state(b.BASE_STATE,{}),a.state(b.NOT_AUTHENTICATED,{views:{"@":{template:"please login to see this page."}}}),a.state(b.NOT_AUTHORIZED,{views:{"@":{template:"You are not .authorized to see this page."}}}),a.state(b.LOGIN,{views:{"@":{template:"Please configure a login state"}}}),a.state(b.POST_LOGIN,{views:{"@":{template:"Please configure a post logout state"}}}),a.state(b.POST_LOGOUT,{views:{"@":{template:"Please configure a post login state"}}})}(),this.setupPages=c,this.$get=d,d.$inject=["$rootScope","$q","$parse","$log","$controller","$state","localStorageService","ngSecured.cacheKeys","ngSecured.authAdapter","ngSecured.permissionsDao"]}angular.module("ngSecured.services").provider("ngSecured.securityEnforcer",a),a.$inject=["$stateProvider","ngSecured.defaultStateNames"]}();